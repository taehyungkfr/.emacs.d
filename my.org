#+TITLE: Emacs configuration file
#+AUTHOR: Tae
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS: toc:3 num:nil ^:nil \n:t

* Config
** Meta

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

** Functions

<<sec:defuns>>

#+begin_src emacs-lisp
(defun my/kill-this-buffer-unless-scratch ()
  "*scratch* 버퍼는 삭제하지 않고, 버퍼 내용을 삭제"
  (interactive)
  (if (not (string= (buffer-name) "*scratch*"))
      (kill-this-buffer)
    (delete-region (point-min) (point-max))
    (switch-to-buffer (other-buffer))
    (bury-buffer "*scratch*")))

(add-hook 'kill-buffer-query-functions
          (lambda() (not (equal (buffer-name) "*scratch*"))))

;; |01234567|
;; |abcdefgh|
;; |ABCDEFGH|
;; |--------|
;; |일바이트|
(defun my/set-font (font size)
  "폰트 변경"
  (interactive
   (let ((completion-ignore-case  t))
     (list (completing-read "Font: " (font-family-list) nil t)
           (read-number "Size: "))))
  (when (member font (font-family-list))
    (set-face-font 'default (font-spec :family font :size size))))

;; https://www.blogbyben.com/2022/05/gotcha-emacs-on-mac-os-too-many-files.html
(defun my/file-notify-rm-all-watches ()
  "Emacs에서 알림 감시 제거. Too many open files 오류 발생 시 수행"
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))

(defun my/minibuffer-backward-kill-word (arg)
  "미니버퍼에서 경로(단어)마다 삭제"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (delete-backward-char arg)))

(defun my/cred (address ports user)
  "등록된 인증서 정보를 읽는다."
  (let* ((found (nth 0 (auth-source-search :max 1
                                           :host address
                                           :port ports
                                           :user user
                                           :require '(:user :secret)))))
    (if found
        (list (plist-get found :user)
              (let ((secret (plist-get found :secret)))
                (if (functionp secret)
                    (funcall secret)
                  secret)))
      nil)))

(defun my/join-path (root &rest dirs)
  "파일 경로 도움 함수
Examples: (my/join-path \"/tmp\" \"a\" \"b.txt\") => /tmp/a/b.txt"
  (if (not dirs)
      root
    (apply 'my/join-path
           (expand-file-name (car dirs) root)
           (cdr dirs))))

(defun my/read-file (path)
  "파일 컨텐츠 읽기"
  (with-temp-buffer
    (insert-file-contents path)
    (buffer-string)))

(defun my/org-store-link ()
  "파일 라인 정보로 링크 복사"
  (interactive)
  (kill-new
   (format "file:%s:%d"
           (buffer-file-name)
           (save-restriction
             (widen) (line-number-at-pos)))))
#+end_src

** Better defaults

기본 옵션 변경

#+begin_src emacs-lisp
(setq-default
 auto-revert-interval 1                        ; 버퍼를 빠르게 새로고침
 warning-minimum-level :emergency              ; 네이티브 컴파일 경고 끄기
 system-time-locale "C"                        ; 시스템 로케일
 echo-keystrokes 0.1                           ; Show keystrokes asap
 inhibit-startup-screen t                      ; No splash screen please
 initial-scratch-message nil                   ; Clean scratch buffer
 ring-bell-function 'ignore                    ; Quiet
 scroll-margin 1                               ; Space between cursor and top/bottom
 sentence-end-double-space nil                 ; No double space
 vc-handled-backends nil                       ; Ignore Default VCS (use magit)
 smerge-command-prefix "\C-cv"                 ; smerge 기본 단축키 셋
 ad-redefinition-action 'accept                ; ad-handle-definition Warning ignore
 display-time-format "%Y-%m-%dT%H:%M"          ; Powerline 날짜 포맷
 display-time-default-load-average nil         ; Do not display the load average
 default-input-method "korean-hangul"          ; 기본 입력
 tab-width 2                                   ; Smaller tabs
 sh-basic-offset 2                             ; SHELL 스타일 기본 들여쓰기
 c-basic-offset 2                              ; C 스타일 기본 들여쓰기
 fill-column 79                                ; Maximum line width
 truncate-lines t                              ; Don't fold lines
 indent-tabs-mode nil                          ; Use spaces instead of tabs
 split-width-threshold 160                     ; Split verticly by default
 split-height-threshold nil                    ; Split verticly by default
 frame-resize-pixelwise t                      ; Fine-grained frame resize
 use-short-answers t                           ; y-or-n-p
 recentf-max-saved-items 100                   ; Show more recent files
 recentf-exclude '("/var/folders/*" "^/tmp/*") ; 최근파일 제외
 custom-file null-device)                      ; Customizations in a separate file

;; 경고음 끄기
(put 'narrow-to-region 'disabled -1)
;; 일반 메시지모드에서도 org 테이블 사용
(add-hook 'message-mode-hook 'turn-on-orgtbl)
;; 디스크 파일 변경 시, 자동 반영
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
;; whitespace remove
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(when (eq system-type 'darwin)
  (setq ns-pop-up-frames nil
        mac-option-modifier nil
        mac-command-modifier 'meta)
  (when (boundp 'mac-pass-command-to-system)
    (setq mac-pass-command-to-system nil))
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode t)))

;; 백업 파일을 단일 디렉토리에 저장한다.
(let ((dir (expand-file-name "auto-save-list" user-emacs-directory)))
  (setq backup-directory-alist `((".*" . ,dir))
        auto-save-file-name-transforms `((".*" ,dir t))))
#+end_src

비활성화 모드

#+begin_src emacs-lisp
(tool-bar-mode 0)
(scroll-bar-mode 0)
(menu-bar-mode 0)
(blink-cursor-mode 0)
#+end_src

활성화 모드

#+begin_src emacs-lisp
(column-number-mode 1)
(delete-selection-mode 1)
(dirtrack-mode 1)
(global-so-long-mode 1)
(global-display-line-numbers-mode 1)
(recentf-mode 1)
(show-paren-mode 1)
(display-time-mode 1)
#+end_src

라인에서 마이너 모드 숨김처리

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/3925/hide-list-of-minor-modes-in-mode-line
(define-minor-mode minor-mode-blackout-mode
  "마이너모드는 라인모드에서 보이지 않도록 설정한다."
  :global t
  :lighter nil)

(catch 'done
  (mapc (lambda (x)
          (when (and (consp x)
                     (equal (cadr x) '("" minor-mode-alist)))
            (let ((original (copy-sequence x)))
              (setcar x 'minor-mode-blackout-mode)
              (setcdr x (list "" original)))
            (throw 'done t)))
        mode-line-modes))

(minor-mode-blackout-mode 1)
#+end_src

** DB

#+begin_src emacs-lisp
(setq sql-postgres-login-params '(server port user database)
      sql-mysql-login-params '(server port user database)
      sql-sqlite-login-params '(server port user database)
      sql-db2-login-params '(server port user database)
      sql-oracle-login-params '(server port user database)
      sql-ms-login-params '(server port user database))
#+end_src

** Base Packages

#+begin_src emacs-lisp
;; Emacs Lisp 라이브러리 컴파일러
(use-package auto-compile)
;; 바이너리 컴파일
(use-package cmake-mode)
;; 사용가능한 키 바인딩 표시
(use-package which-key
  :config
  (which-key-mode 1))
;; Git 유틸
(use-package magit
  :init
  ;; gpg-sign 추가하도록 구성
  (setq transient-default-level 5))
;; 페이지 나누기(^L) 표시 변경
(use-package page-break-lines)
;; 툴팁
(use-package popup)
;; decorations to HTML
(use-package htmlize)
;; 들여쓰기 표시
(use-package highlight-indentation)
;; RFC
(use-package rfc-mode)
;; 멀티 커서
(use-package multiple-cursors)
;; 괄호 편집 유틸
(use-package paredit)
;; 스니펫 모음
(use-package yasnippet-snippets
  :config
  (yas-global-mode 1))
;; 선택 영역 늘리고 줄이는 유틸
(use-package expand-region)

(use-package reveal-in-osx-finder
  :if (eq system-type 'drawin))
#+end_src

** Undo

#+begin_src emacs-lisp
(use-package undo-tree
  :init
  (defun undo-tree-mode-setup ()
    (setq undo-tree-visualizer-diff t
          undo-tree-visualizer-timestamps t
          undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (global-undo-tree-mode 1))
  (add-hook 'after-init-hook 'undo-tree-mode-setup))
#+end_src

** Visual

#+begin_src emacs-lisp
;; 현재의 테마를 비활성화하고 로딩하도록 설정한다.
(defadvice load-theme
    (before disable-before-load
            (theme &optional no-confirm no-enable) activate)
  (mapc 'disable-theme custom-enabled-themes))
#+end_src

** Environment

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x pgtk))
  :init
  (defun my-exec-path-from-shell-initialize ()
    (setq exec-path-from-shell-variables '( "PATH"
                                            "TMPDIR"
                                            "GOROOT"
                                            "GOPATH"
                                            "JAVA_HOME"))
    (exec-path-from-shell-initialize))
  (add-hook 'after-init-hook 'my-exec-path-from-shell-initialize))
#+end_src

** Evil

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "quit" 'evil-quit))

(use-package evil-collection
  :after (evil)
  :config
  (evil-collection-init))

(use-package evil-org
  :after (evil org-agenda)
  :init
  (add-hook 'org-mode-hook 'evil-org-mode)
  :config
  (use-package evil-org-agenda
    :straight (:type built-in)
    :config
    (evil-org-agenda-set-keys))
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar)))
#+end_src

** [[https://github.com/bastibe/org-journal][Journal]]

#+begin_src emacs-lisp
(use-package org-journal
  :init
  (setq org-journal-dir "~/org/journal/"
        org-journal-date-format "%A, %Y-%m-%d"
        org-journal-search-result-date-format "%A, %Y-%m-%d"
        org-journal-time-format "<%Y-%m-%d %a %H:%M>"
        org-journal-file-format "%Y/%m/%Y%m%d.org"
        org-journal-file-type 'weekly
        org-journal-file-header "#+TITLE: %Y.%m Journal\n#+OPTIONS: toc:nil ^:nil \n:t"
        org-journal-enable-agenda-integration t)
  :config
  ;; 캘린더 설정
  (custom-set-faces
   '(calendar-today ((t (:background "#CC9393" :underline t))))
   '(org-journal-calendar-entry-face ((t (:foreground "#BDE0F3" :slant italic))))))
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :init
  (setq projectile-globally-ignored-directories
        '(".git"
          ".vscode"
          ".idea"
          ".svn"
          ".tox"
          ".cache"
          "vendor")))
#+end_src

** Completion

#+begin_src emacs-lisp
(use-package consult
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  ;; (setq xref-show-xrefs-function #'consult-xref
  ;;       xref-show-definitions-function #'consult-xref)
  (advice-add #'register-preview :override #'consult-register-window))

(use-package savehist
  :config
  (savehist-mode 1))

(use-package marginalia
  :config
  (marginalia-mode 1))

;; (use-package embark)
;; (use-package embark-consult
;;   :after (embark consult)
;;   :init
;;   (setq prefix-help-command #'embark-prefix-help-command
;;         embark-indicators
;;         '(embark-highlight-indicator
;;           embark-isearch-highlight-indicator
;;           embark-minimal-indicator)))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package vertico
  :init
  (setq vertico-count-format '("%-5s " . "%2$s")
        vertico-resize nil)
  :config
  (vertico-mode 1))

(use-package consult-projectile
  :after (consult projectile)
  :init
  (defcustom consult-projectile-key-bindings
    '((projectile-find-file        . consult-projectile-find-file)
      (projectile-find-dir         . consult-projectile-find-dir)
      (projectile-switch-to-buffer . consult-projectile-switch-to-buffer)
      (projectile-switch-project   . consult-projectile-switch-project)
      (projectile-grep             . consult-grep)
      (projectile-ripgrep          . consult-ripgrep)
      (" "                         . consult-projectile)
      ("si"                        . consult-git-grep)
      ("Oa"                        . consult-org-agenda))
    "Like counsel-projectile-key-bindings"
    :type '(alist :key-type (choice (function :tag "Projectile command")
                                    key-sequence)
                  :value-type (function :tag "Consult-projectile command"))
    :group 'consult-projectile)

  (define-minor-mode consult-projectile-mode
    ""
    :group 'consult-projectile
    :require 'consult-projectile
    :global t
    (cond
     (consult-projectile-mode
      (projectile-mode)
      (dolist (binding consult-projectile-key-bindings)
        (if (functionp (car binding))
            (define-key projectile-mode-map `[remap ,(car binding)] (cdr binding))
          (define-key projectile-command-map (car binding) (cdr binding)))))
     (t
      (dolist (binding consult-projectile-key-bindings)
        (if (functionp (car binding))
            (define-key projectile-mode-map `[remap ,(car binding)] nil)
          (define-key projectile-command-map (car binding) nil)))
      (projectile-mode -1))))
  :config
  (consult-projectile-mode 1))


(use-package corfu
  :init
  (setq corfu-cycle t
        corfu-auto t
        corfu-count 15
        corfu-auto-delay 0)
  :config
  (global-corfu-mode 1))

(use-package corfu-terminal
  :after (corfu)
  :config
  (unless (display-graphic-p)
    (corfu-terminal-mode +1)))
#+end_src

** Translate

#+begin_src emacs-lisp
(use-package google-translate
  :init
  (defun google-translate--search-tkk ()
    "https://github.com/atykhonov/google-translate/issues/137"
    (list 430675 2721866130))

  (setq google-translate-default-source-language "en"
        google-translate-default-target-language "ko"
        google-translate-output-destination nil)
  :config
  (require 'google-translate-default-ui))
#+end_src

** Treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :init
  ;; https://github.com/Alexander-Miller/treemacs#configuration
  (setq treemacs-read-string-input 'from-minibuffer ; 이맥스 미니버퍼
        treemacs-litter-directories '("/vendor" "/node_modules")
        treemacs-no-png-images t))
(use-package treemacs-evil)
(use-package treemacs-projectile)
#+end_src

** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :init
  (setq-default olivetti-body-width 82)
  (add-hook 'olivetti-mode-on-hook (lambda () (display-line-numbers-mode 0)))
  (add-hook 'olivetti-mode-off-hook (lambda () (display-line-numbers-mode 1))))
#+end_src

** Ibuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :init
  (defalias 'list-buffers 'ibuffer)
  (defun ibuffer-mode-setup ()
    (setq ibuffer-expert t
          ibuffer-default-sorting-mode 'major-mode)
    (ibuffer-auto-mode 1))
  (add-hook 'ibuffer-mode-hook 'ibuffer-mode-setup))
#+end_src

** Vterm

#+begin_src emacs-lisp
(use-package vterm
  :if (not (eq system-type 'windows-nt))
  :init
  (setq vterm-always-compile-module t
        vterm-timer-delay 0.01)

  (defadvice vterm (after kill-with-no-query nil activate)
    (set-process-query-on-exit-flag (get-buffer-process ad-return-value) nil))

  (let ((last-vterm ""))
    (defun toggle-vterm ()
      (interactive)
      (cond ((string-match-p "^\\vterm<[1-9][0-9]*>$" (buffer-name))
             (goto-non-vterm-buffer))
            ((get-buffer last-vterm) (switch-to-buffer last-vterm))
            (t (vterm (setq last-vterm "vterm<1>")))))

    (defun switch-vterm (n)
      (let ((buffer-name (format "vterm<%d>" n)))
        (setq last-vterm buffer-name)
        (cond ((get-buffer buffer-name)
               (switch-to-buffer buffer-name))
              (t (vterm buffer-name)
                 (rename-buffer buffer-name)))))

    (defun goto-non-vterm-buffer ()
      (let* ((r "^\\vterm<[1-9][0-9]*>$")
             (vterm-buffer-p (lambda (b) (string-match-p r (buffer-name b))))
             (non-vterms (cl-remove-if vterm-buffer-p (buffer-list))))
        (when non-vterms
          (switch-to-buffer (car non-vterms))))))

  (defun clear-comint ()
    "Runs `comint-truncate-buffer' with the `comint-buffer-maximum-size' set to zero."
    (interactive)
    (let ((comint-buffer-maximum-size 0))
      (comint-truncate-buffer)))

  (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode 0))))
#+end_src

** Elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :init
  (setq elfeed-search-filter "@6-month-ago +unread"
        elfeed-show-entry-switch 'switch-to-buffer
        elfeed-search-title-max-width 100)

  :config
  (require 'elfeed-link)

  ;; c.f. https://meliache.de/posts/2021/08/emacs-elfeed-browse-specifically-tagged-feeds-in-eww-automatically/
  (defun my/elfeed-show-eww-if-tag (entry tag)
    "Browse elfeed ENTRY in eww if it is tagged with TAG."
    (when (member tag (elfeed-entry-tags entry))
      (let ((browse-url-browser-function #'eww-browse-url))
        (elfeed-show-visit))))
  (defun my/elfeed-show-eww-if-tag-is-browse (entry)
    "Browse elfeed ENTRY in eww if it has the tag `browse'."
    (my/elfeed-show-eww-if-tag entry 'browse))
  (advice-add #'elfeed-show-entry :after #'my/elfeed-show-eww-if-tag-is-browse)

  ;; From http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/
  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'star))
  (defalias 'elfeed-toggle-trash
    (elfeed-expose #'elfeed-search-toggle-all 'trash))
  (defface elfeed-search-star-title-face
    ;; '((t :foreground "#F77" ))
    '((t :inherit font-lock-constant-face))
    "Marks a starred Elfeed entry.")
  (defface elfeed-search-trash-title-face
    '((t :inherit font-lock-comment-face :strike-through t))
    "Marks a trashed Elfeed entry.")
  (push '(star elfeed-search-star-title-face) elfeed-search-face-alist)
  (push '(trash elfeed-search-trash-title-face) elfeed-search-face-alist)

  ;; From: https://github.com/skeeto/elfeed/issues/11
  (defun my/elfeed-db-purge ()
    "trash 태그를 가진 항목의 DB삭제"
    (interactive)
    (with-elfeed-db-visit (entry _)
      (let ((ref (elfeed-entry-content entry)))
        (when (and (elfeed-ref-p ref) (memq 'trash (elfeed-entry-tags entry)))
          (elfeed-ref-delete ref))))))

(use-package elfeed-org
  :after (elfeed org)
  :init
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  :config
  (elfeed-org))

(use-package elfeed-summary
  :after (elfeed))
#+end_src

** Eglot

#+begin_src emacs-lisp
(use-package eglot
  :init

  ;; eglot-organize-imports is hopefully a temporary stopgap until
  ;; https://github.com/joaotavora/eglot/issues/574 is addressed.
  (defun eglot-organize-imports (mode)
    "Offer to execute the source.organizeImports code action."
    (interactive)
    (when (eq major-mode mode)
      (unless (eglot--server-capable :codeActionProvider)
        (eglot--error "Server can't execute code actions!"))
      (let* ((server (eglot--current-server-or-lose))
             (actions (jsonrpc-request
                       server
                       :textDocument/codeAction
                       (list :textDocument (eglot--TextDocumentIdentifier))))
             (action (cl-find-if
                      (jsonrpc-lambda (&key kind &allow-other-keys)
                        (string-equal kind "source.organizeImports"))
                      actions)))
        (when action
          (eglot--dcase action
            (((Command) command arguments)
             (eglot-execute-command server (intern command) arguments))
            (((CodeAction) edit command)
             (when edit (eglot--apply-workspace-edit edit))
             (when command
               (eglot--dbind ((Command) command arguments) command
                 (eglot-execute-command server (intern command) arguments)))))))))

  (setq-default eglot-workspace-configuration
                '((:gopls .
                          ((staticcheck . t)
                           (matcher . "CaseSensitive"))))))

(use-package consult-eglot
  :after (eglot consult))
#+end_src

** Lisp

#+begin_src emacs-lisp
(dolist (mode '(ielm-mode
                lisp-mode
                emacs-lisp-mode
                lisp-interaction-mode
                scheme-mode))
  (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
#+end_src

** Go

#+begin_src emacs-lisp
(use-package go-mode
  :after (eglot)
  :init
  (defun go-mode-setup()
    (setq tab-width 2
          compile-command "go test -v .")

    (hs-minor-mode t)

    ;; (add-hook 'before-save-hook #'lsp-format-buffer)
    ;; (add-hook 'before-save-hook #'lsp-organize-imports)
    ;; (add-hook 'before-save-hook 'gofmt-before-save)

    (local-set-key (kbd "C-c C-c") 'compile))
  ;; (add-hook 'go-mode-hook 'lsp-deferred)
  (add-hook 'go-mode-hook 'go-mode-setup))

(use-package go-tag)
(use-package ob-go)

(with-eval-after-load 'eglot
  (require 'project)
  (defun project-find-go-module (dir)
    (when-let ((root (locate-dominating-file dir "go.mod")))
      (cons 'go-module root)))
  (cl-defmethod project-root ((project (head go-module)))
    (cdr project))
  (add-hook 'project-find-functions 'project-find-go-module)

  (add-hook 'before-save-hook (apply-partially #'eglot-organize-imports 'go-mode))

  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook 'eglot-format-buffer -10 t))
  (add-hook 'go-mode-hook #'eglot-format-buffer-on-save)
  (add-hook 'go-mode-hook 'eglot-ensure))
#+end_src

** Java

#+begin_src emacs-lisp
(use-package eglot-java
  :init
  ;; (setq lombok-jar-path (expand-file-name "bin/lombok-1.18.jar" user-emacs-directory))
  ;; (add-to-list 'eglot-java-eclipse-jdt-args (concat "-javaagent:" lombok-jar-path))
  :config
  (add-hook 'java-mode-hook 'eglot-java-mode))
#+end_src

** File format

#+begin_src emacs-lisp
(when (image-type-available-p 'svg)
  (require 'svg))

(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))

(use-package json-mode
  :config
  (setq js-indent-level tab-width)
  (add-hook 'json-mode-hook 'highlight-indentation-mode))

(use-package yaml-mode
  :config
  (add-hook 'yaml-mode-hook 'highlight-indentation-mode))

(use-package plantuml-mode
  :init
  (let ((jar-file "~/.emacs.d/bin/plantuml.jar"))
    (setq plantuml-default-exec-mode 'jar
          plantuml-jar-path jar-file
          org-plantuml-jar-path jar-file)))

(use-package k8s-mode
  :init
  (setq k8s-indent-offset nil
        k8s-site-docs-url "https://kubernetes.io/docs/reference/generated/kubernetes-api/"))

(use-package markdown-mode
  :init
  (setq markdown-command "multimarkdown"))

(use-package adoc-mode)
(use-package js2-mode)
(use-package dockerfile-mode)
(use-package groovy-mode)
(use-package vimrc-mode)
#+end_src

** Org

#+begin_src emacs-lisp
(use-package org
  :init
  (setq org-startup-folded t
        org-adapt-indentation nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 0
        org-imenu-depth 3
        org-log-done 'time
        org-babel-go-command "GO111MODULE=off go"
        org-babel-default-header-args:sh `((:noweb . "yes") (:results . "output"))
        org-agenda-window-setup 'current-window
        org-agenda-start-with-log-mode '(closed)
        org-agenda-tags-column -120       ; auto bug fix
        org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "PAUSED(p)" "|"
                                      "REVIEW(r)" "DONE(d)" "CANCELED(c)"))
        org-agenda-files '("~/org/inbox.org"
                           "~/org/gtd.org"
                           "~/org/tickler.org")
        org-refile-targets '(("~/org/gtd.org" :maxlevel . 1)
                             ("~/org/someday.org" :level . 1)
                             ("~/org/tickler.org" :maxlevel . 2))
        org-capture-templates '(("t" "TODO [inbox]" entry (file "~/org/inbox.org") "* TODO %i%?")
                                ("T" "Tickler" entry (file "~/org/tickler.org") "* %i%? \n %U"))
        org-tag-alist '(("crypt" . ?c)
                        ("@home" . ?h)
                        ("@office" . ?o))
        org-html-postamble nil
        org-html-use-infojs 'when-configured
        org-html-head-include-default-style t
        org-html-head "<style>pre {background-color: #3f3f3f;color: #dcdccc;}</style>")

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ditaa . t)
     (java . t)
     (go . t)
     (js . t)
     (C . t)
     (shell . t)
     (plantuml . t)))

  (dolist (temp
           '(("sh" . "src sh \n")
             ("u" . "src plantuml :file ?.png :cmdline -charset UTF-8\n")
             ("t" . "src typescript :cmdline -t es6 \n")))
    (add-to-list 'org-structure-template-alist temp))

  :config
  (require 'org-tempo)
  (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n,")
  (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist)))

(use-package epa-file
  :after (org)
  :straight (:type built-in)
  :autoload epa-file-enable)

(use-package org-crypt
  :after (org)
  :straight (:type built-in)
  :config
  (setq epa-file-select-keys nil
        epg-pinentry-mode 'loopback
        auth-sources '((:source "~/.authinfo.gpg"))
        org-crypt-key nil
        org-tags-exclude-from-inheritance (quote ("crypt")))
  ;; 암호 항목에 대한 tangle 내보내기 문제 해결
  (org-crypt-use-before-save-magic)
  (defun my/reveal-and-move-back ()
    (org-reveal)
    (goto-char my/old-point))
  (defun my/org-reveal-after-save-on ()
    (setq my/old-point (point))
    (add-hook 'after-save-hook 'my/reveal-and-move-back))
  (defun my/org-reveal-after-save-off ()
    (remove-hook 'after-save-hook 'my/reveal-and-move-back))
  (add-hook 'org-babel-pre-tangle-hook 'my/org-reveal-after-save-on)
  (add-hook 'org-babel-post-tangle-hook 'my/org-reveal-after-save-off))

(use-package ox-gfm
  :after (org))

(use-package org-tree-slide
  :after (org))
#+end_src

** Mail

- 설치 이후 =cd ~/.emacs.d/straight/repos/mu && sudo make install= 수행

#+begin_src emacs-lisp
(use-package mu4e
  ;; :straight (:type built-in)
  :straight ( :host github
              :repo "djcb/mu"
              :branch "master"
              :files ("build/mu4e/*.el")
              :pre-build (("./autogen.sh") ("make")))
  ;; :custom (mu4e-mu-binary "~/.emacs.d/straight/repos/mu/build/mu/mu")
  :init
  (setq read-mail-command 'mu4e
        mail-user-agent 'mu4e-user-agent
        mu4e-get-mail-command "mbsync -a"
        mu4e-change-filenames-when-moving t
        mu4e-confirm-quit nil
        mu4e-context-policy 'pick-first
        mu4e-completing-read-function 'completing-read
        mu4e-search-full t
        mu4e-search-include-related nil
        mu4e-eldoc-support t
        mu4e-notification-support t
        mu4e-update-interval (* 2 60)
        mu4e-attachment-dir "~/Downloads/"
        mu4e-maildir-shortcuts '(("/Inbox" . ?i))
        mu4e-headers-visible-lines 20
        mu4e-headers-visible-columns 80
        mu4e-headers-visible-lines 10
        mu4e-headers-date-format "%Y-%m-%dT%H:%M"
        mu4e-headers-fields '((:human-date . 16)
                              (:flags      . 5)
                              (:from       . 22)
                              (:subject    . nil))))

(use-package smtpmail
  :init
  (setq message-citation-line-format "%N @ %Y-%m-%dT%H:%M :\n"
        message-citation-line-function 'message-insert-formatted-citation-line
        message-send-mail-function 'smtpmail-send-it
        message-kill-buffer-on-exit t)

  (setq starttls-use-gnutls t
        smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587))

;; Org export HTML 메일 발송
(use-package org-mime
  :init
  (add-hook 'org-mime-html-hook
            (lambda ()
              (org-mime-change-element-style
               ;; zenburn => background-color: #3f3f3f;color: #dcdccc;
               "pre" "border: 1px solid #eee;"))))
#+end_src

* Binding

[[https://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][설정 파일 끝에 유지]]

#+begin_src emacs-lisp
(defvar my-key-map (make-keymap)
  "A keymap for custom bindings.")

(define-minor-mode my-key-mode
  "A mode that activates my-key."
  :init-value t
  :keymap my-key-map
  :lighter " my-key")

(my-key-mode t)
#+end_src

** Bindings for Evaluate

#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-defun)
(define-key lisp-interaction-mode-map (kbd "C-c C-c") 'eval-defun)
#+end_src

** Bindings for [[https://github.com/bbatsov/projectile][Projectile]]

#+begin_src emacs-lisp
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Bindings for Eglot

#+begin_src emacs-lisp
(define-key eglot-mode-map (kbd "C-c l g d") 'xref-find-definitions)
(define-key eglot-mode-map (kbd "C-c l g i") 'eglot-find-implementation)
(define-key eglot-mode-map (kbd "C-c l g r") 'xref-find-references)
(define-key eglot-mode-map (kbd "C-c l r") 'eglot-rename)
(define-key eglot-mode-map (kbd "C-c l o") 'eglot-code-action-organize-imports)
(define-key eglot-mode-map (kbd "C-c l h") 'eldoc)

(evil-collection-define-key 'normal 'eglot-mode-map "gr" 'xref-find-references)
#+end_src

** Bindings for Completion

#+begin_src emacs-lisp
(define-key my-key-map (kbd "C-s") 'consult-line)
(define-key my-key-map (kbd "M-y") 'consult-yank-pop)
(define-key my-key-map (kbd "C-x b") 'consult-buffer)
(define-key my-key-map (kbd "C-c b") 'consult-bookmark)
(define-key my-key-map (kbd "C-c i") 'consult-imenu)
(define-key my-key-map (kbd "C-c r") 'consult-recent-file)
(define-key my-key-map (kbd "C-h M") 'consult-minor-mode-menu)
(define-key minibuffer-local-map (kbd "C-l") 'my/minibuffer-backward-kill-word)

(define-key corfu-map (kbd "M-d") 'corfu-popupinfo-toggle)
(define-key corfu-map (kbd "M-p") 'corfu-popupinfo-scroll-down)
(define-key corfu-map (kbd "M-n") 'corfu-popupinfo-scroll-up)
#+end_src

** Bindings for [[https://orgmode.org][Org]]

#+begin_src emacs-lisp
(define-key my-key-map (kbd "C-c a") 'org-agenda)
(define-key my-key-map (kbd "C-c c") 'org-capture)
(define-key my-key-map (kbd "C-c t")
  (lambda () (interactive) (org-agenda nil "n")))

(define-key my-key-map (kbd "C-c j") 'org-journal-open-current-journal-file)
(define-key my-key-map (kbd "C-c J") 'org-journal-new-entry)
#+end_src

** Bindings for Base

#+begin_src emacs-lisp
(define-key my-key-map (kbd "C-c e") 'treemacs)
(define-key my-key-map (kbd "C-M-f") 'toggle-frame-fullscreen)
(define-key my-key-map (kbd "C-x k") 'my/kill-this-buffer-unless-scratch)
(define-key my-key-map (kbd "C-c o") 'olivetti-mode)
(define-key my-key-map (kbd "C-c m") 'magit-status)
(define-key my-key-map (kbd "C->") 'er/expand-region)
(define-key my-key-map (kbd "C-<") 'er/contract-region)
(define-key my-key-map (kbd "C-c T") 'google-translate-at-point)

(when (fboundp 'vterm)
  (dolist (n (number-sequence 1 9))
    (define-key my-key-map (kbd (concat "M-" (int-to-string n)))
      (lambda () (interactive) (switch-vterm n))))
  (define-key my-key-map (kbd "M-`")
    (lambda () (interactive) (switch-vterm 10))))

(add-hook 'ielm-mode-hook
          (lambda ()
            (define-key my-key-map (kbd "C-j") 'ielm-return)))
#+end_src
